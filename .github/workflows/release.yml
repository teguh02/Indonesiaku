name: Build & Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v0.1.1
  workflow_dispatch:

jobs:
  build-artifacts:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: indk-linux
            build_cmd: make clean && make
            
          - os: macos-latest
            artifact_name: indk-macos
            build_cmd: make clean && make
            
          - os: windows-latest
            artifact_name: indk-windows.exe
            build_cmd: "make clean && make"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup MinGW (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          choco install mingw make -y
          refreshenv
          gcc --version
          make --version
        continue-on-error: true

      - name: Build (Linux/macOS)
        if: runner.os != 'Windows'
        run: ${{ matrix.build_cmd }}

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: ${{ matrix.build_cmd }}

      - name: Verify binary
        if: runner.os != 'Windows'
        run: |
          ./indk -v
          file ./indk

      - name: Verify binary (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          .\indk.exe -v
          Get-Item .\indk.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ./indk*
          retention-days: 90

  docker-build-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    continue-on-error: true  # Don't fail release if Docker push fails
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract version from tag
        id: meta
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building Docker image for version: ${VERSION}"

      - name: Login to Docker Hub
        if: env.DOCKER_USERNAME != '' && env.DOCKER_PASSWORD != ''
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
        continue-on-error: true

      - name: Build and Push Docker image
        if: env.DOCKER_USERNAME != '' && env.DOCKER_PASSWORD != ''
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/images/Dockerfile
          push: true
          tags: |
            teguh02/indonesiaku:latest
            teguh02/indonesiaku:${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: true

      - name: Build Docker image (no push - no secrets)
        if: env.DOCKER_USERNAME == '' || env.DOCKER_PASSWORD == ''
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/images/Dockerfile
          push: false
          tags: |
            teguh02/indonesiaku:latest
            teguh02/indonesiaku:${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: true

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-artifacts]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    continue-on-error: true
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true

      - name: Create Release Notes
        run: |
          echo "# Release ${{ steps.version.outputs.version }}" > release_notes.txt
          echo "" >> release_notes.txt
          echo "## Release Artifacts" >> release_notes.txt
          echo "- Linux binary: indk-linux" >> release_notes.txt
          echo "- macOS binary: indk-macos" >> release_notes.txt
          echo "- Windows binary: indk-windows.exe" >> release_notes.txt

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.version.outputs.version }}
          name: "Indonesiaku ${{ steps.version.outputs.version }}"
          bodyFile: release_notes.txt
          allowUpdates: true
        continue-on-error: true

  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [build-artifacts]
    if: always()
    continue-on-error: true
    
    steps:
      - name: Print summary
        run: |
          echo "::group::Release Build Summary"
          echo "Build Status: completed"
          echo "Artifacts: Linux, macOS, Windows"
          echo "::endgroup::"
