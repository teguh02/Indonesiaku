#ifndef indonesiaku_scanner_h
#define indonesiaku_scanner_h

typedef enum {
    // Single-character tokens.
    TOKEN_LEFT_PAREN, TOKEN_RIGHT_PAREN,
    TOKEN_LEFT_BRACE, TOKEN_RIGHT_BRACE,
    TOKEN_LEFT_BRACKET, TOKEN_RIGHT_BRACKET,
    TOKEN_COMMA, TOKEN_DOT, TOKEN_MINUS, TOKEN_PLUS,
    TOKEN_COLON, TOKEN_SEMICOLON, TOKEN_SLASH, TOKEN_STAR,
    TOKEN_PERCENT, TOKEN_POWER,

    // One or two character tokens.
    TOKEN_BANG, TOKEN_BANG_EQUAL,
    TOKEN_EQUAL, TOKEN_EQUAL_EQUAL,
    TOKEN_GREATER, TOKEN_GREATER_EQUAL,
    TOKEN_LESS, TOKEN_LESS_EQUAL,
    TOKEN_SLASH_SLASH,  // Pembagian bulat
    TOKEN_PLUS_EQUAL, TOKEN_MINUS_EQUAL,
    TOKEN_STAR_EQUAL, TOKEN_SLASH_EQUAL,

    // Literals.
    TOKEN_IDENTIFIER, TOKEN_STRING, TOKEN_NUMBER,

    // Keywords dalam Bahasa Indonesia
    TOKEN_DAN, TOKEN_KELAS, TOKEN_SELAIN, TOKEN_SALAH,
    TOKEN_UNTUK, TOKEN_FUNGSI, TOKEN_JIKA, TOKEN_KOSONG,
    TOKEN_ATAU, TOKEN_CETAK, TOKEN_KEMBALIKAN, TOKEN_SUPER,
    TOKEN_DIRI, TOKEN_BENAR, TOKEN_VARIABEL, TOKEN_SELAGI,
    TOKEN_JIKA_LAIN, TOKEN_DALAM, TOKEN_HENTIKAN, TOKEN_LANJUT,
    TOKEN_LEWATI, TOKEN_IMPOR, TOKEN_DARI, TOKEN_SEBAGAI,
    TOKEN_DENGAN, TOKEN_COBA, TOKEN_KECUALI, TOKEN_AKHIRNYA,
    TOKEN_NAIKKAN, TOKEN_TIDAK,

    TOKEN_ERROR, TOKEN_EOF,
    TOKEN_NEWLINE, TOKEN_INDENT, TOKEN_DEDENT
} TokenType;

typedef struct {
    TokenType type;
    const char* start;
    int length;
    int line;
} Token;

void initScanner(const char* source);
Token scanToken();

#endif
